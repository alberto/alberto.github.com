<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: quality | sharp bites]]></title>
  <link href="http://www.sharpbites.com/categories/quality/atom.xml" rel="self"/>
  <link href="http://www.sharpbites.com/"/>
  <updated>2012-03-05T22:58:24+01:00</updated>
  <id>http://www.sharpbites.com/</id>
  <author>
    <name><![CDATA[alberto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The road to Continuous Integration. Part 1: Get your source under control!]]></title>
    <link href="http://www.sharpbites.com/2009/09/11/road-to-continuous-integration-part-1/"/>
    <updated>2009-09-11T00:00:00+02:00</updated>
    <id>http://www.sharpbites.com/2009/09/11/road-to-continuous-integration-part-1</id>
    <content type="html"><![CDATA[<div class='post'>
<p><a href="http://lh6.ggpht.com/_kQ7iivKjVno/Sqq2s0-EiHI/AAAAAAAAAL0/DFQJE0sWIhc/s1600-h/timemachine6.jpg"><img style="border-right-width: 0px; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" border="0" alt="time-machine" align="right" src="http://lh3.ggpht.com/_kQ7iivKjVno/Sqq2tpkGKTI/AAAAAAAAAL4/g1pf0RP_k7Q/timemachine_thumb6.jpg?imgmax=800" width="115" height="115" /></a> If you are not already doing so, put your stuff under source control. Right now. It doesn't matter how small your project is or whether you are working alone. If it's worth your time, it's worth putting it under source control. </p>  <h4>What is Source Control?</h4>  <p>Source control, often referred to as VCS (Version Control System) or SCM (Source Code Management) is the management of changes in files. It's a time machine that lets you see how your project looked like at any given point in time.</p>  <p>For a more detailed introduction, see <a href="http://www.ericsink.com/scm/source_control.html">Eric Sink's Source Control HOWTO</a> or the <a href="http://svnbook.red-bean.com/nightly/en/index.html">SVN book</a>.</p>  <h4>Why you should use a SCM tool</h4>  <p>It gives you an infinite undo-button. No matter how much you have screwed up, you can always go back to a stable point.</p>  <p>You can share code with other people.</p>  <p>You can keep track of your changes over time. This allows you to know who changed what, when and (luckily, if you use meaningful comments) why.</p>  <p>You can maintain multiple code bases of your software. Even if you only have one active version at a time, it's useful to start new development independently.</p>  <h4>What should you store?</h4>  <p>Everything you need to build your product. That includes your sources, of course, but also any libraries your projects depends on (avoid referencing GAC'ed or installed libraries), any tools you use and any scripts that you need as part of the process. Nothing should be dependent of your machine installation.</p>  <p>The goal is to be able to get into a clean machine, get a copy of the codebase from your source repository, build it (automatically) and voil&#224;, you are done and ready to start working!</p>  <h4>WHICH SCM ARE YOU?</h4>  <p><a href="http://subversion.tigris.org/">There</a> <a href="http://www.git-scm.org/">are</a> <a href="http://www.selenic.com/mercurial/">many</a> <a href="http://bazaar-vcs.org/">alternatives</a>, just pick one, (oh well, <a href="http://www.codinghorror.com/blog/archives/000660.html">not THAT one</a>). If you don't want to set up and maintain a server, you can use <a href="http://code.google.com/">one</a> <a href="http://sourceforge.net">of</a> <a href="http://www.assembla.com">the</a> <a href="http://github.com/">many</a> <a href="http://bitbucket.org/">online</a> <a href="http://www.launchpad.net">services</a> <a href="http://www.codeplex.com">available</a> (some of them are just for open source projects, and some have free and paid plans). Which one is best will depend on your specific needs:</p>  <h5>If you...</h5>  <ul>   <li>want an easy to install, easy to start tool -&gt; svn </li>    <li>want a powerful tool, at the expense of a bit steeper learning curve -&gt; git, mercurial, bazaar </li>    <li>need to use a mature GUI/integration with Visual Studio -&gt; svn, tfs </li>    <li>need good branching and merging support -&gt; git, mercurial, bazaar </li>    <li>need an all-in-one tool (source control, bug tracking system, continuous integration) completely integrated, even if the individual tools are not-so-great for the -&gt; tfs </li>    <li>are a Microsoft-only shop -&gt; tfs </li> </ul>  <p>For the clients there are also a myriad of tools available for all platforms. You have command-line interfaces, standalone GUI tools (<a href="http://tortoisesvn.net/">tortoisesvn</a>, <a href="http://bitbucket.org/tortoisehg/stable/wiki/Home">tortoisehg</a>, <a href="http://code.google.com/p/tortoisegit/">tortoisegit</a>) and IDE integrated (<a href="http://www.visualsvn.com/">VisualSVN</a>, <a href="http://ankhsvn.open.collab.net/">AnhkSVN</a>, <a href="http://code.google.com/p/gitextensions/">Git Extensions</a>).</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It's the people, stupid!]]></title>
    <link href="http://www.sharpbites.com/2009/08/15/its-people-stupid/"/>
    <updated>2009-08-15T00:00:00+02:00</updated>
    <id>http://www.sharpbites.com/2009/08/15/its-people-stupid</id>
    <content type="html"><![CDATA[<div class='post'>
<blockquote>You need people who are passionate about what they do. People who care about their craft — and actually think of it as a craft. People who take pride in their work, regardless of the monetary reward involved. People who sweat the details even if 95% of folks don't know the difference. People who want to build something great and won't settle for less. [...]Anyhow, when you find those people, hold onto them. In the end, the folks on your team will make or break your project — and your company.<br /><cite> <a href="http://gettingreal.37signals.com/">Getting Real</a>, <a href="http://www.37signals.com/">37signals</a></cite></blockquote></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Excellence]]></title>
    <link href="http://www.sharpbites.com/2009/05/08/excellence/"/>
    <updated>2009-05-08T00:00:00+02:00</updated>
    <id>http://www.sharpbites.com/2009/05/08/excellence</id>
    <content type="html"><![CDATA[<div class='post'>
<blockquote>We are what we repeatedly do. Excellence, then, is not an act, but a habit.<br /><cite> Aristotle</cite></blockquote></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The price of change]]></title>
    <link href="http://www.sharpbites.com/2009/03/12/price-of-change/"/>
    <updated>2009-03-12T00:00:00+01:00</updated>
    <id>http://www.sharpbites.com/2009/03/12/price-of-change</id>
    <content type="html"><![CDATA[<div class='post'>
<blockquote>Change is expensive, no question about it. However, consider the alternative—stagnation.</blockquote><cite> Jim Highsmith</cite></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming for the Mob sharks? No, thanks.]]></title>
    <link href="http://www.sharpbites.com/2009/02/22/programming-for-mob-sharks-no-thanks/"/>
    <updated>2009-02-22T00:00:00+01:00</updated>
    <id>http://www.sharpbites.com/2009/02/22/programming-for-mob-sharks-no-thanks</id>
    <content type="html"><![CDATA[<div class='post'>
<a href="http://c2.com/">Ward Cunniham</a>, of <a href="http://c2.com/cgi/wiki">Ward's Wiki</a> fame, was the coiner of the term "technical debt". He made an interesting clarification in the following video:<br /><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/pqeJFYwnkjE&hl=es&fs=1"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/pqeJFYwnkjE&hl=es&fs=1" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="344"></embed></object><br /><br />According to his intention, the term is usually misused to reflect (and even encourage) the writing of sloppy code with the excuse that it will be refactored later. His original vision was more aligned with the XP style of simple design.<br /><br />Doing bad code with the excuse of refactoring somewhere in the future is not technical debt we are going to pay, but rather asking money from loan mob sharks at an astronomic interest rate and the expenses of losing a few body parts in the way.<br /><br />PS: It is funny how the metaphor was coined as an analogy that his boss could understand, but it has grown to be used and abused by everybody in the industry. Maybe that's also related to the debt culture that has drawn our uneducated society into the current situation.</div>

]]></content>
  </entry>
  
</feed>
