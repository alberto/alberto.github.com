<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dependency injection | sharp bites]]></title>
  <link href="http://www.sharpbites.com/categories/dependency-injection/atom.xml" rel="self"/>
  <link href="http://www.sharpbites.com/"/>
  <updated>2012-03-03T21:39:13+01:00</updated>
  <id>http://www.sharpbites.com/</id>
  <author>
    <name><![CDATA[alberto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AltNerDinner: Part 4. Introducing NHibernate. Because POCO is enough]]></title>
    <link href="http://www.sharpbites.com/2009/10/19/altnerdinner-part-4-introducing/"/>
    <updated>2009-10-19T00:00:00+02:00</updated>
    <id>http://www.sharpbites.com/2009/10/19/altnerdinner-part-4-introducing</id>
    <content type="html"><![CDATA[<div class='post'>
<p>It's time already to introduce a proper persistence solution. NHibernate can be a little intimidating at first for a new-comer, but I undoubtedly think it's the way to go. And it's not really more difficult than the other contenders anymore. Its two major drawbacks (hand writing all that XMhelL mapping and not strongly typed queries) are solved (or in serious process of it) by Fluent NHibernate and NHibernate.Linq.</p>  <p>Other than that, the only difficulty relies in learning a few concepts inherent to OR/Ms. Most notably the <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html">Unit of Work</a> pattern and <a href="http://martinfowler.com/eaaCatalog/lazyLoad.html">Lazy Loading</a>, and all the stuff around them (namely repositories, query objects, persistence ignorance, POCOs, DTOs, entities/value objects and equality, inheritance mapping, dynamic proxies, caching, anemic domains, active record, transactions, concurrency, session lifetime, unit testing, select n+1 problems and other pitfalls to avoid,&#160; ...). [NOTE: If you need more info on this topics I'd recommend you to visit the <a href="http://nhforge.org/">official nhibernate site</a>.]</p>  <p>Sounds scary? It might seem using an OR/M brings in more problems that the ones it solves, but I don't think it is the case, except for maybe the most trivial apps (like AltNerdDinner, hehe, I know). Even if you are writing a relatively simple app, you can still greatly benefit from using NHibernate (or Active Record on top of it). If your app has inherent complexity, well, of course you'll have to do your homework and learn a few concepts, but that's not your OR/M's fault. Using a hand-rolled DAL won't make your problems go away (quite the opposite, I'd dare to say).</p>  <p>As I said, most (if not all) of this problems exist in all OR/M, it's just that some of them somehow try to hide this complexity in one or another way. The problem is, this is a can of worms that can lead to very bad practices and slap on your face at any moment. And this is were I think this is were NHibernate excels at, its flexibility. It gets out of your way.</p>  <h4>Ok, enough talking! Show me the code!</h4>  <p>To use NHibernate and NH.Linq we need to add a reference in our project to the following dll's: NHibernate, NHibernate.Linq, FluentNHibernate (if we hadn't already) and lastly NHibernate.ByteCode.Castle if we want to use Castle's dynamic proxy as our proxy generator of choice.</p>  <p>Here is the code for my DinnerRepository implementation using NHibernate:</p>  <pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">NhDinnerRepository </span>: <span style="color: #2b91af">IDinnerRepository<br /></span>{<br />    <span style="color: blue">private readonly </span><span style="color: #2b91af">ISession </span>_session;<br /><br />    <span style="color: blue">public </span>NhDinnerRepository(<span style="color: #2b91af">ISession </span>session)<br />    {<br />        _session = session;<br />    }<br /><br />    <span style="color: blue">private </span><span style="color: #2b91af">INHibernateQueryable</span>&lt;<span style="color: #2b91af">Dinner</span>&gt; GetDbContext()<br />    {<br />        <span style="color: blue">return </span>_session.Linq&lt;<span style="color: #2b91af">Dinner</span>&gt;();<br />    }<br /><br />    <span style="color: blue">public </span><span style="color: #2b91af">IQueryable</span>&lt;<span style="color: #2b91af">Dinner</span>&gt; FindAllDinners()<br />    {<br />        <span style="color: blue">return </span>GetDbContext().AsQueryable();<br />    }<br /><br />    <span style="color: blue">public </span><span style="color: #2b91af">IQueryable</span>&lt;<span style="color: #2b91af">Dinner</span>&gt; FindByLocation(<span style="color: blue">float </span>latitude, <span style="color: blue">float </span>longitude)<br />    {<br />        <span style="color: blue">return </span>GetDbContext().Where(d =&gt; d.Distance(latitude, longitude) &lt; 100).AsQueryable();<br />    }<br /><br />    <span style="color: blue">public </span><span style="color: #2b91af">IQueryable</span>&lt;<span style="color: #2b91af">Dinner</span>&gt; FindUpcomingDinners()<br />    {<br />        <span style="color: blue">return from </span>dinner <span style="color: blue">in </span>GetDbContext()<br />               <span style="color: blue">where </span>dinner.EventDate &gt; <span style="color: #2b91af">DateTime</span>.Now<br />               <span style="color: blue">orderby </span>dinner.EventDate<br />               <span style="color: blue">select </span>dinner;<br />    }<br /><br />    <span style="color: blue">public </span><span style="color: #2b91af">Dinner </span>GetDinner(<span style="color: blue">int </span>id)<br />    {<br />        <span style="color: blue">return </span>GetDbContext().SingleOrDefault(d =&gt; d.DinnerID == id);<br />    }<br /><br />    <span style="color: blue">public void </span>Save(<span style="color: #2b91af">Dinner </span>dinner)<br />    {<br />        <span style="color: blue">if </span>(!dinner.IsValid)<br />        {<br />            <span style="color: blue">throw new </span><span style="color: #2b91af">ApplicationException</span>(<span style="color: #a31515">&quot;Rule violations&quot;</span>);<br />        }<br /><br />        _session.SaveOrUpdate(dinner);<br />    }<br /><br />    <span style="color: blue">public void </span>Delete(<span style="color: #2b91af">Dinner </span>dinner)<br />    {<br />        _session.Delete(dinner);<br />    }</pre><br /><br /><p>As you see, I am returning IQueryable&lt;Dinner&gt; instead of traditional .NET collections. Some people think <a href="http://mikehadlow.blogspot.com/2009/01/should-my-repository-expose-iqueryable.html">IQueryable is the best thing since slice bread</a>, others are <a href="http://ayende.com/Blog/archive/2009/04/17/repository-is-the-new-singleton.aspx">ditching repositories entirely</a>, some prefer <a href="http://www.udidahan.com/2007/03/28/query-objects-vs-methods-on-a-repository/">using query objects</a>, others advocate for <a href="http://codebetter.com/blogs/gregyoung/archive/2009/01/16/ddd-the-generic-repository.aspx">explicit repositories</a>, some use <a href="http://serialseb.blogspot.com/2009/08/nhibernate-repository-that-oren-wont.html">generic ones</a> and I just don't know yet, but decided to go at least with repositories because I want to take <a href="http://www.udidahan.com/2008/02/15/from-crud-to-domain-driven-fluency/">control of how entities are persisted</a>.</p><br /><br /><p>To instantiate my NHibernate repository, I need to supply it with an ISession. I <a href="http://ayende.com/Blog/archive/2008/07/24/How-to-review-NHibernate-application.aspx">don't create the ISession inside the repository</a>, since this is considered a bad practice. Instead, I create a new Session per request. To do that, I expected I would have some infrastructure in place in MvcContrib, but that was not the case. <a href="http://jeffreypalermo.com">Jeffrey Palermo</a> posted a <a href="http://jeffreypalermo.com/blog/use-this-nhibernate-wrapper-to-keep-your-repository-classes-simple/">NHibernate wrapper to manage ISession</a>, but I thought that class had too many responsibilities, so I separated it in the following.</p><br /><br /><pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">SessionFactoryBuilder<br /></span>{<br />    <span style="color: blue">private static </span><span style="color: #2b91af">ISessionFactory </span>_sessionFactory;<br /><br />    <span style="color: blue">private readonly </span><span style="color: #2b91af">IPersistenceConfigurer </span>_dbConfiguration;<br /><br />    <span style="color: blue">public </span>SessionFactoryBuilder(<span style="color: #2b91af">IPersistenceConfigurer </span>dbConfiguration)<br />    {<br />        _dbConfiguration = dbConfiguration;<br />    }<br /><br />    <span style="color: blue">public </span><span style="color: #2b91af">ISessionFactory </span>Build()<br />    {<br />        <span style="color: blue">if </span>(_sessionFactory == <span style="color: blue">null</span>)<br />        {<br />            _sessionFactory  = GetDbConfiguration().BuildSessionFactory();   <br />        }<br /><br />        <span style="color: blue">return </span>_sessionFactory;<br />    }<br /><br />    <span style="color: blue">public </span><span style="color: #2b91af">Configuration </span>GetDbConfiguration()<br />    {<br />        <span style="color: blue">return </span><span style="color: #2b91af">Fluently</span>.Configure()<br />                .Mappings(m =&gt; m.FluentMappings.AddFromAssemblyOf&lt;<span style="color: #2b91af">Dinner</span>&gt;())<br />                .Database(_dbConfiguration)                    <br />                .BuildConfiguration();<br />    }<br />}</pre><br /><br /><p>This builds the session factory and also returns the configuration (useful to create the schema). It needs an IPersistenceConfigurer, which I supply from the constructor, in order to be able to switch between different configurations (i.e. MSSQL and SQLite), as shown below:</p><br /><br /><pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">MsSqlPersistenceConfigurerFactory </span>: <span style="color: #2b91af">IPersistenceConfigurerFactory<br /></span>{<br />    <span style="color: blue">private string </span>_connectionString;<br /><br />    <span style="color: blue">public </span>MsSqlPersistenceConfigurerFactory(<span style="color: blue">string </span>connectionString)<br />    {<br />        _connectionString = connectionString;<br />    }<br /><br />    <span style="color: blue">public </span><span style="color: #2b91af">IPersistenceConfigurer </span>GetPersistenceConfigurer()<br />    {<br />        <span style="color: blue">return </span><span style="color: #2b91af">MsSqlConfiguration</span>.MsSql2005<br />                .ConnectionString(c =&gt; c.Is(_connectionString))<br />                .ShowSql()<br />                .FormatSql()<br />                .ProxyFactoryFactory&lt;<span style="color: #2b91af">ProxyFactoryFactory</span>&gt;();<br />    }<br />}</pre><br /><br /><h4>Life of a Session</h4><br /><br /><p>We need to create the aforementioned ISession somehow. In Web applications, it's generally a good practice to create a new Session on every request. For that, Ayende recently <a href="http://ayende.com/Blog/archive/2009/08/05/do-you-need-a-framework.aspx">suggested</a> to just stick it in the global.asax, but I prefer to put it in a separate&#160; IHttpModule.</p><br /><br /><pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">NhSessionPerRequestModule </span>: <span style="color: #2b91af">IHttpModule<br /></span>{<br />    <span style="color: blue">private readonly </span><span style="color: #2b91af">ISessionFactory </span>_sessionFactory;<br /><br />    <span style="color: blue">public </span>NhSessionPerRequestModule(<span style="color: #2b91af">ISessionFactory </span>sessionFactory)<br />    {<br />        _sessionFactory = sessionFactory;<br />    }<br />    <span style="color: blue">public void </span>Init(<span style="color: #2b91af">HttpApplication </span>application)<br />    {<br />        application.BeginRequest += <span style="color: blue">delegate<br />                                    </span>{<br />                                        CurrentSession = _sessionFactory.OpenSession();<br />                                    };<br /><br />        application.EndRequest += <span style="color: blue">delegate<br />                                  </span>{<br />                                      <span style="color: blue">if </span>(CurrentSession != <span style="color: blue">null</span>)<br />                                      {<br />                                          CurrentSession.Dispose();<br />                                      }<br />                                  };<br />    }<br /><br />    <span style="color: blue">public static </span><span style="color: #2b91af">ISession </span>CurrentSession<br />    {<br />        <span style="color: blue">get </span>{ <span style="color: blue">return </span>(<span style="color: #2b91af">ISession</span>)<span style="color: #2b91af">HttpContext</span>.Current.Items[<span style="color: #a31515">&quot;current.session&quot;</span>]; }<br />        <span style="color: blue">private set </span>{ <span style="color: #2b91af">HttpContext</span>.Current.Items[<span style="color: #a31515">&quot;current.session&quot;</span>] = <span style="color: blue">value</span>; }<br />    }<br /><br />    <span style="color: blue">public void </span>Dispose()<br />    {        <br />    }<br />}</pre><br /><a href="http://11011.net/software/vspaste"></a><br /><br /><p>In my Global.asax, I configure it as follows:</p><br /><br /><pre class="code"><span style="color: blue">private static readonly </span><span style="color: #2b91af">ISessionFactory </span>SessionFactory = CreateSessionFactory();<br /><span style="color: blue">private static </span><span style="color: #2b91af">IWindsorContainer </span>_container;<br /><br /><span style="color: blue">private static </span><span style="color: #2b91af">ISessionFactory </span>CreateSessionFactory()<br />{<br />    <span style="color: blue">string </span>connString = <span style="color: #2b91af">ConfigurationManager</span>.ConnectionStrings[<span style="color: #a31515">&quot;AltNerdDinner&quot;</span>].ConnectionString;<br />    <span style="color: blue">return new </span><span style="color: #2b91af">SessionFactoryBuilder</span>(<br />            <span style="color: blue">new </span><span style="color: #2b91af">MsSqlPersistenceConfigurerFactory</span>(connString)<br />                    .GetPersistenceConfigurer())<br />            .Build();<br />}<br /><br /><span style="color: blue">private readonly </span><span style="color: #2b91af">NhSessionLifetimeModule </span>_nhSessionLifetimeModule =<br />        <span style="color: blue">new </span><span style="color: #2b91af">NhSessionLifetimeModule</span>(SessionFactory);<br /><br /><span style="color: blue">public override void </span>Init()<br />{<br />    <span style="color: blue">base</span>.Init();<br />    _nhSessionLifetimeModule.Init(<span style="color: blue">this</span>);<br />}</pre><br /><br /><p>Lastly, this is my current configuration of the container in order to register the components:</p><br /><br /><pre class="code"><span style="color: blue">private void </span>RegisterComponents()<br /> {<br />     _container = <span style="color: blue">new </span><span style="color: #2b91af">WindsorContainer</span>();<br />     _container.AddFacility&lt;<span style="color: #2b91af">FactorySupportFacility</span>&gt;();<br /><br />     <span style="color: #2b91af">ControllerBuilder</span>.Current.SetControllerFactory(<br />         <span style="color: blue">new </span><span style="color: #2b91af">WindsorControllerFactory</span>(_container));<br /><br />     _container.Register(<br />             <span style="color: #2b91af">Component</span>.For&lt;<span style="color: #2b91af">ISession</span>&gt;()<br />                     .UsingFactoryMethod(() =&gt; <span style="color: #2b91af">NhSessionLifetimeModule</span>.CurrentSession)<br />                     .LifeStyle.Transient);<br />  <br />     _container.Register(<br />             <span style="color: #2b91af">Component</span>.For&lt;<span style="color: #2b91af">IDinnerRepository</span>&gt;()<br />                     .ImplementedBy&lt;<span style="color: #2b91af">NhDinnerRepository</span>&gt;().LifeStyle.Transient);<br /><br />     _container.RegisterControllers(<span style="color: #2b91af">Assembly</span>.GetExecutingAssembly());<br /> }</pre>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AltNerdDinner: Part 2. Rich Man's Dependency Injection]]></title>
    <link href="http://www.sharpbites.com/2009/10/06/altnerddinner-part-2-rich-man/"/>
    <updated>2009-10-06T00:00:00+02:00</updated>
    <id>http://www.sharpbites.com/2009/10/06/altnerddinner-part-2-rich-man</id>
    <content type="html"><![CDATA[<div class='post'>
<p></p>  <p><em>This is part 2 of the <a href="http://sharpbites.blogspot.com/2009/08/introducing-altnerddinner.html">AltNerdDinner</a> Series.</em></p>  <p>The classes in <a href="http://nerddinner.codeplex.com/">NerdDinner</a> use <a href="http://martinfowler.com/articles/injection.html">dependency injection</a> (<a href="http://martinfowler.com/articles/injection.html#ConstructorInjectionWithPicocontainer">constructor injection</a>, to be more precise), which is a form of <a href="http://martinfowler.com/bliki/InversionOfControl.html">Inversion of Control</a> that allows you to break the dependencies between classes, minimizing coupling (i.e. a Good Thing &#8482;). Instead having classes with direct dependencies&#160; on other classes, and instantiating them directly, classes are dependent on interfaces, and the concrete implementation is injected via the constructor, in this case, or via a setter in the case of <a href="http://martinfowler.com/articles/injection.html#SetterInjectionWithSpring">setter injection</a>. Constructor injection is preferred for required dependencies, as it makes dependencies more explicit, and setter injection is usually reserved for optional dependencies.</p>  <p>Using this technique, the responsibility of providing the dependencies is delegated to the calling object (hence the term Inversion of Control).</p>  <h4>Poor Man's Dependency Injection</h4>  <p>The problem with the NerdDinner codebase is that, besides the constructor that accepts the required dependencies, they added a default constructor that news up those dependencies. Here is an example:</p>  <pre class="code"><span style="color: blue">public </span>DinnersController() : <span style="color: blue">this</span>(<span style="color: blue">new </span>DinnerRepository())<br />{<br />}<br /><br /><span style="color: blue">public </span>DinnersController(<span style="color: #2b91af">IDinnerRepository </span>repository) {<br />    dinnerRepository = repository;<br />}</pre><br /><br /><p>This may look like a good compromise. You get the decoupling needed to run your tests (by means of the constructor accepting parameters) and you are also able to instantiate you classes calling the default constructor, without the added complexity of an IoC container. However this technique is considered an <a href="http://www.lostechies.com/blogs/jimmy_bogard/archive/2009/07/03/how-not-to-do-dependency-injection-in-nerddinner.aspx">anti-pattern</a> (although <a href="http://devlicio.us/blogs/tim_barcz/archive/2009/07/12/why-there-s-nothing-wrong-with-dependency-injection-in-nerddinner.aspx">not everybody agrees</a>) <a href="http://www.lostechies.com/blogs/chad_myers/archive/2009/07/14/the-usual-result-of-poor-man-s-dependency-injection.aspx">leading to many headaches</a>. By adding this constructor we're almost at square one again. Our classes are still coupled, and if we need to add new dependencies, we'll have to go hunting around to fix all the constructor calls.</p><br /><br /><h4>If I were a rich man</h4><br /><br /><p>So now you are convinced to use an IoC container, you can have a look this <a href="http://www.lostechies.com/blogs/jimmy_bogard/archive/2008/09/12/some-ioc-container-guidelines.aspx">container guidelines</a> by <a href="http://www.lostechies.com/blogs/jimmy_bogard/default.aspx">Jimmy Bogard</a>. He may not consider his recommendations as best practices, but I do (and so should you, IMHO). I picked <a href="http://www.castleproject.org/container/gettingstarted/index.html">Castle Windsor</a> as my framework of choice. As usual, <a href="http://structuremap.sourceforge.net/">there</a> <a href="http://code.google.com/p/autofac/">are</a> <a href="http://ninject.org/">plenty</a>&#160;<a href="http://www.spring.net/">of</a> <a href="http://www.codeplex.com/unity">alternatives</a>. Even though the API is not the cleanest of all the frameworks, I favored Windsor because it is very mature, is widely adopted, it also supports .NET 2.0, and has good integration with NHibernate. It also is the container used in <a href="http://code.google.com/p/sharp-architecture/">S#arp Architecture</a>, which is something I will probably end up using. Otherwise, my choice would be <a href="http://structuremap.sourceforge.net/">StructureMap</a>.</p><br /><br /><p>In order to use Windsor, you have to reference on your project <em>Castle.Core</em>, <em>Castle.MicroKernel</em> and <em>Castle.Windsor</em>. To ease the configuration of the container, I also downloaded <a href="http://www.codeplex.com/MVCContrib">MvcContrib</a> (which I was planning to use anyway) and added a reference to <em>MvcContrib.Castle</em>.</p><br /><br /><p>This is the code needed to register the controllers and the Repository.</p><br /><br /><pre class="code"><span style="color: blue">private void </span>RegisterComponents()<br />{<br />    _container = <span style="color: blue">new </span><span style="color: #2b91af">WindsorContainer</span>();<br />    <span style="color: #2b91af">ControllerBuilder</span>.Current.SetControllerFactory(<br />        <span style="color: blue">new </span><span style="color: #2b91af">WindsorControllerFactory</span>(_container));<br />    _container.RegisterControllers(<span style="color: #2b91af">Assembly</span>.GetExecutingAssembly());<br />    _container.Register(<br />            <span style="color: #2b91af">Component</span>.For&lt;<span style="color: #2b91af">IDinnerRepository</span>&gt;()<br />            .ImplementedBy&lt;<span style="color: #2b91af">InMemoryDinnerRepository</span>&gt;());<br />}</pre><br /><br /><p>To allow the creation of the controllers by the MVC framework, you need to supply a ControllerFactory that can instantiate them, as they now take dependencies on their constructors. MvcContrib provides one for Windsor, as well as the method RegisterControllers to, guess what, registering all the controllers in a specified assembly. I also registered my DinnerRepository, so that Windsor can resolve the references to it.</p>  </div>

]]></content>
  </entry>
  
</feed>
