<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: .net | sharp bites]]></title>
  <link href="http://www.sharpbites.com/categories/-net/atom.xml" rel="self"/>
  <link href="http://www.sharpbites.com/"/>
  <updated>2012-03-03T21:38:08+01:00</updated>
  <id>http://www.sharpbites.com/</id>
  <author>
    <name><![CDATA[alberto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On value types vs reference types and premature optimization]]></title>
    <link href="http://www.sharpbites.com/2009/04/27/on-value-types-vs-reference-types-and/"/>
    <updated>2009-04-27T00:00:00+02:00</updated>
    <id>http://www.sharpbites.com/2009/04/27/on-value-types-vs-reference-types-and</id>
    <content type="html"><![CDATA[<div class='post'>
Eric Lippert, wrote a great post about value types vs reference types, and how, many times, the discussion is shifted to the-heap-and-the-stack, when it should really be about the differences when those types are passed (by value) as parameters.<br /><br />He nails it when he says:<br /><blockquote>Making the nano-optimization of making a type that really should be a ref type into a value type for a few nanoseconds of perf gain is probably not worth it. I would only be making that choice if profiling data showed that there was a large, real-world-customer-impacting performance problem directly mitigated by using value types. Absent such data, Iâ€™d always make the choice of value type vs reference type based on whether the type is semantically representing a value or semantically a reference to something.</blockquote></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Targetting .NET 2.0 with Nant and Visual Studio 2008]]></title>
    <link href="http://www.sharpbites.com/2009/03/10/targetting-net-20-with-nant-and-visual/"/>
    <updated>2009-03-10T00:00:00+01:00</updated>
    <id>http://www.sharpbites.com/2009/03/10/targetting-net-20-with-nant-and-visual</id>
    <content type="html"><![CDATA[<div class='post'>
If you try to migrate a solution to VS2008 and you are using nant, you'll probably find a few problems. This is one of them I am documenting for you.<br />I wanted to use VS2008 and nant, but still want target the .net 2.0 framework. I read somewhere I needed to install the .net 2.0 sdk, but I was still having issues, where msbuild was complaining it didn't recognize the format of the solution file.<br />It turns out you need to change nant.settings.currentframework to "net-3.5", so that it is the version of msbuild that comes with msbuild who compiles the solution (so I am not sure anymore you need the .net 2.0 sdk). It will still target the .net 2.0 framework for your projects if you set that that way in VS, as msbuild uses that info for the target.<br /><br />Hope it helps someone out there.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exce(r)ptions]]></title>
    <link href="http://www.sharpbites.com/2008/06/01/exceptions/"/>
    <updated>2008-06-01T00:00:00+02:00</updated>
    <id>http://www.sharpbites.com/2008/06/01/exceptions</id>
    <content type="html"><![CDATA[<div class='post'>
Just a few notes on exceptions to remind, from <a href="http://codebetter.com/blogs/karlseguin/default.aspx">Karl Seguin</a>.<br /><span style="font-weight:bold;">Handling exceptions</span><br />1 - Only handle exceptions that you can actually do something about, and<br />2 - You can't do anything about the vast majority of exceptions<br /><br /><span style="font-weight:bold;">Logging</span><br />You should log every exception. Ideally you'll centralize your logging - an HttpModule's OnError event is your best choice for an ASP.NET application or web service.<br /><br /><span style="font-weight:bold;">Handling database access (and its possible exceptions):</span><br /><code>using (SqlConnection connection = new SqlConnection(FROM_CONFIGURATION))  <br />using (SqlCommand command = new SqlCommand("SomeSQL", connection))  <br />{  <br />   connection.Open();  <br />   command.ExecuteNonQuery();  <br />} </code><br /><br /><span style="font-weight:bold;">throw vs. throw ex</span><br />On occasion you'll need to rethrow an exception because, while you can't handle the exception, you still need to execute some code when an exception occurs. In this case you should use <span style="font-weight:bold;">throw</span> to preserve the full exception stack. Contrary, if you find yourself in a situation where you think you want to rethrow an exception with your handler as the source, a better approach is to use a nested exception:<br /><code>catch (HibernateException ex)<br />{<br />  if (transaction != null) { transaction.Rollback(); }<br />  throw new Exception("Email already in use", ex);<br />}</code><br /><br /><span style="font-weight:bold;">When to throw</span><br />A method should throw when it wasn't able to do what it was suppossed to do.<br /><br />If you want a more in-depth explanation on the subject, I recommend you go and read the <a href="http://codebetter.com/blogs/karlseguin/archive/2008/05/29/foundations-of-programming-pt-8-back-to-basics-exceptions.aspx">article</a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Returning null vs. Empty Collection/Default Object]]></title>
    <link href="http://www.sharpbites.com/2008/01/24/returning-null-vs-empty/"/>
    <updated>2008-01-24T00:00:00+01:00</updated>
    <id>http://www.sharpbites.com/2008/01/24/returning-null-vs-empty</id>
    <content type="html"><![CDATA[<div class='post'>
In a nice thread on the <a href="http://tech.groups.yahoo.com/group/cli_dev/message/9849">cli_dev list (formerly altdotnet)</a> they discuss whether you should return null or an Empty Collection/Default Object when a query returns no results.<br /><br />There is a more or less common approach I agree with of returning a null collection when your query yields no results, like in GetUsers(), being therefore able to iterate it with a foreach(User user in GetUsers()) witout having to use safe-guards.<br /><br />I think Luke Breuer makes a good point too in <a href="http://tech.groups.yahoo.com/group/cli_dev/message/9855">this post</a> when talking about retrieving a particular result:<br /><blockquote>I like null checks to actually have significant meaning.  I've actually adopted a convention -- GetAwesomeObject will return a valid object or throw; FindAwesomeObject might return null.  The idea is that a NullReferenceException means you really screwed up somewhere -- you have a glaring logic error, because you didn't account for possible emptiness. </blockquote></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Public fields vs. Public properties]]></title>
    <link href="http://www.sharpbites.com/2007/12/12/public-fields-vs-public-properties/"/>
    <updated>2007-12-12T00:00:00+01:00</updated>
    <id>http://www.sharpbites.com/2007/12/12/public-fields-vs-public-properties</id>
    <content type="html"><![CDATA[<div class='post'>
ScottGu  blogged some time ago, among other interesting things, about the <a href="http://weblogs.asp.net/scottgu/archive/2007/03/08/new-c-orcas-language-features-automatic-properties-object-initializers-and-collection-initializers.aspx">difference between public fields and public properties</a>.<br /><br />I had always seen comments about the convenience of using public properties instead of public fields, but I hadn't seen a real explanation until now. I tought, "why should I bother writing a getter and a setter? If I just use a public Foo field, I can refactor it into a Property if it turns out I have to." It seems <a href="http://www.codinghorror.com/blog/archives/000654.html">I wan't the only one that thought this very same thing</a>.<br /><br />But it turns out there are some differences:<br /><ul><li>You can't databind against a variable. </li><li>Changing a variable to a property is <a href="http://blogs.msdn.com/abhinaba/archive/2006/04/11/572694.aspx">a breaking change</a>. <strong style="font-weight: normal;">When you change a field to a property you need to re-build all code that used that field.</strong>  </li><li>Reflection works differently on variables vs. properties, so if you rely on reflection, it's easier to use all properties.</li></ul>There are some other relevant points in both posts.<br />From Jeff's:<br /><ul><li>Distinguishing public and private using only case is an accident waiting to happen. I still don't have a clear view if I should be using  _bar = bar or this.bar = bar.<br /></li><li>Is it a property or a method? A property should do less work-- a <i>lot</i> less work-- than a method. Properties should be lightweight. If your property incurs significant effort, it should be refactored into an explicit method.</li></ul>From Scott's, there is some <span style="font-size:100%;">syntactic </span>sugar for C#3 (or is it 3.5?):<br /><br /><span style="font-weight: bold;">Automatic Properties</span><br />This cleans up our classes from all the innecesary private fields.</span><br /><pre name="code" class="c-sharp">public class Person {<br />public string FirstName { get; set; }<br />   public string LastName { get; set; } <br />   public int Age { get; set; }<br />}<br /></pre><br /><span style="font-weight: bold;">Object initializers</span><br />Allow you to atomically initialize an object lacking an appropiate constructor. <a href="http://community.bartdesmet.net/blogs/bart/archive/2006/12/04/C_2300_-3.0-Feature-Focus-_2D00_-Part-2-_2D00_-Object-Initializers.aspx">More on this.</a><br /><pre name="code" class="c-sharp">Person person = new Person { FirstName="Scott", LastName="Guthrie", Age=32 };<br /></pre><span style="font-weight: bold;">Collection initializers</span><br />Same annonymous methods, but applied to collections.<br /><pre name="code" class="c-sharp">   List<person> people = new List<person> {<br />    new Person { FirstName = "Scott", LastName = "Guthrie", Age = 32 },<br />    new Person { FirstName = "Bill", LastName = "Gates", Age = 50 },<br />    new Person { FirstName = "Susanne", LastName = "Guthrie", Age = 32 }<br /> };<br /></person></person></pre></div>

]]></content>
  </entry>
  
</feed>
