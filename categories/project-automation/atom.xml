<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: project automation | sharp bites]]></title>
  <link href="http://www.sharpbites.com/categories/project-automation/atom.xml" rel="self"/>
  <link href="http://www.sharpbites.com/"/>
  <updated>2012-03-03T21:15:56+01:00</updated>
  <id>http://www.sharpbites.com/</id>
  <author>
    <name><![CDATA[alberto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The road to Continuous Integration. Part 3: Script it, build it, test it, break it, fix it. Commit it.]]></title>
    <link href="http://www.sharpbites.com/2009/09/28/road-to-continuous-integration-part-3/"/>
    <updated>2009-09-28T00:00:00+02:00</updated>
    <id>http://www.sharpbites.com/2009/09/28/road-to-continuous-integration-part-3</id>
    <content type="html"><![CDATA[<div class='post'>
Ideally, any new developer in your team should be able to build your project with a single command or double-click. To accomplish that, we are going to use a build script.  <br />You can also <a href="http://nant.sourceforge.net/">pick</a> <a href="http://msdn.microsoft.com/en-us/library/0k6kkbsd.aspx">your</a> <a href="http://rake.rubyforge.org/">poison</a> here, too. I am going to stick with nant for the moment, because it's the most mature and broadly used, and the one I know better, despite of the <i>XMHell</i> that is the angle-bracket orgy it imposes. <a href="http://codebetter.com/blogs/david_laribee/archive/2008/08/25/omg-rake.aspx">Rake seems nice</a>, and has less noise than the others, but I don't like the fact that I have to install ruby and rake separately. As I said, I like all of my dependencies being included in source control, so that my projects are self-contained (there are some efforts to get <a href="http://www.stephenbalkum.com/archive/2009/06/09/when-all-you-need-is-a-rake.aspx">ruby and rake as a single executable</a>, though). If you are hesitating between msbuild and nant, you can check out a <a href="http://sharpbites.blogspot.com/2008/09/nant-vs-msbuild.html">comparison between nant and msbuild</a> I did a while ago.  <br /><a href="http://lh5.ggpht.com/_kQ7iivKjVno/SsEIh_i4iCI/AAAAAAAAAME/oexhq-gr7N4/s1600-h/projectstructure10.jpg"><img style="border-right-width: 0px; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" border="0" alt="project-structure" align="left" src="http://lh6.ggpht.com/_kQ7iivKjVno/SsEIiowefII/AAAAAAAAAMI/TuxGRy-ffPI/projectstructure_thumb8.jpg?imgmax=800" width="155" height="244" /></a>  <br />As you can see on the picture, I have added two build scripts to the root of <a href="http://github.com/alberto/altnerddinner">AltNerdDinner</a>. <i><a href="http://github.com/alberto/altnerddinner/blob/master/common-targets.build">common-targets.build</a></i> has, you know, common nant targets. It's a script I reuse between projects and it has all the tasks I usually execute (compile, recompile, publish or package the project, run the tests, analyze the code or binaries, etc). <i><a href="http://github.com/alberto/altnerddinner/blob/master/AltNerdDinner.build">AltNerdDinner.build</a></i> is the specific script for this project. By virtue of <a href="http://en.wikipedia.org/wiki/Convention_over_configuration">Convention over Configuration</a> on the project structure and directory and file names, we can remove a lot of unnecessary noise. By adhering to conventions, we just have to set up a couple of properties and simply delegate on common-targets.build for most (if not all) of the tasks, just defining the dependencies between tasks and passing parameters to configure the task where needed.  <br />  <br />You can see below how simple it gets, with only 16 lines of code:  <br />  <br />  <pre class="code"><span style="color: blue"></span><span style="color: blue"></span></pre><br /><a href="http://11011.net/software/vspaste"></a><br /><br /><pre class="code"><span style="color: blue">&lt;?</span><span style="color: #a31515">xml </span><span style="color: red">version</span><span style="color: blue">=</span>&quot;<span style="color: blue">1.0</span>&quot; <span style="color: blue">?&gt;<br />&lt;</span><span style="color: #a31515">project </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">AltNerdDinner</span>&quot; <span style="color: red">default</span><span style="color: blue">=</span>&quot;<span style="color: blue">compile</span>&quot;<span style="color: blue">&gt;<br />  &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">dir.root</span>&quot; <span style="color: red">value</span><span style="color: blue">=</span>&quot;<span style="color: blue">${path::get-full-path('.')}</span>&quot; <span style="color: blue">/&gt;<br />  &lt;</span><span style="color: #a31515">include </span><span style="color: red">buildfile</span><span style="color: blue">=</span>&quot;<span style="color: blue">${dir.root}/common-targets.build</span>&quot; <span style="color: blue">/&gt;<br />  &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">file.solution</span>&quot; <span style="color: red">value</span><span style="color: blue">=</span>&quot;<span style="color: blue">${dir.root}/NerdDinner.sln</span>&quot; <span style="color: blue">/&gt;<br />  &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">file.project</span>&quot; <span style="color: red">value</span><span style="color: blue">=</span>&quot;<span style="color: blue">${dir.root}/src/NerdDinner/NerdDinner.csproj</span>&quot; <span style="color: blue">/&gt;<br />  &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">assembly.tests</span>&quot; <span style="color: red">value</span><span style="color: blue">=</span>&quot;<span style="color: blue">NerdDinner.Tests.dll</span>&quot; <span style="color: blue">/&gt;<br /><br />  &lt;</span><span style="color: #a31515">target </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">compile</span>&quot; <span style="color: red">depends</span><span style="color: blue">=</span>&quot;<span style="color: blue">common.clean, common.init, common.compile</span>&quot; <span style="color: blue">/&gt;<br />  &lt;</span><span style="color: #a31515">target </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">test</span>&quot; <span style="color: red">depends</span><span style="color: blue">=</span>&quot;<span style="color: blue">compile, common.test</span>&quot; <span style="color: blue">/&gt;<br />  &lt;</span><span style="color: #a31515">target </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">publish</span>&quot; <span style="color: red">depends</span><span style="color: blue">=</span>&quot;<span style="color: blue">test, common.publish</span>&quot; <span style="color: blue">/&gt;<br />  &lt;</span><span style="color: #a31515">target </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">zip</span>&quot; <span style="color: red">depends</span><span style="color: blue">=</span>&quot;<span style="color: blue">publish, common.zip</span>&quot; <span style="color: blue">/&gt;<br />  &lt;</span><span style="color: #a31515">target </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">analyze</span>&quot; <span style="color: red">depends</span><span style="color: blue">=</span>&quot;<span style="color: blue">publish, common.stylecop, common.ndepend</span>&quot; <span style="color: blue">/&gt;<br />  &lt;</span><span style="color: #a31515">target </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">build</span>&quot; <span style="color: red">depends</span><span style="color: blue">=</span>&quot;<span style="color: blue">publish, analyze</span>&quot; <span style="color: blue">/&gt;<br />  &lt;</span><span style="color: #a31515">target </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">build-full</span>&quot; <span style="color: red">depends</span><span style="color: blue">=</span>&quot;<span style="color: blue">publish, analyze, zip</span>&quot; <span style="color: blue">/&gt;<br />&lt;/</span><span style="color: #a31515">project</span><span style="color: blue">&gt;</span></pre><br /><a href="http://11011.net/software/vspaste"></a><br /><br /><p>There is also a <a href="http://github.com/alberto/altnerddinner/blob/master/go.bat">go.bat</a> script, which just calls nant, passing AltNerdDinner.build as the build file. As a side note, notice that my solution file is in the root of the project instead of in src. I like to keep it there so that I can easily refer to the root of the project from it (useful if you want to dome some pre/post build stuff on Visual Studio or for other tools than reference your solution).</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The road to Continuous Integration. Part 2: Shake your tree]]></title>
    <link href="http://www.sharpbites.com/2009/09/13/road-to-continuous-integration-part-2/"/>
    <updated>2009-09-13T00:00:00+02:00</updated>
    <id>http://www.sharpbites.com/2009/09/13/road-to-continuous-integration-part-2</id>
    <content type="html"><![CDATA[<div class='post'>
<p>As I stated in the <a href="http://sharpbites.blogspot.com/2009/09/road-to-continuous-integration-part-1.html">first part</a> of this <a href="http://sharpbites.blogspot.com/2009/09/road-to-continuous-integration.html">Continuous Integration series</a>, one of the aims of storing your stuff under source control is being able to build your project from a fresh checkout, without needing to manually install or configure anything.</p>  <p>To accomplish this, it is always useful to use a standardized tree structure. You can have a look at some of the popular open source projects you use and love to get ideas on how to organize things. Now that your have <a href="http://sharpbites.blogspot.com/2009/09/road-to-continuous-integration-part-1.html">everything under source control</a> (don't you?), we can start moving a few things around.</p>  <p><img align="right" src="http://4.bp.blogspot.com/_kQ7iivKjVno/SpghIOjZSzI/AAAAAAAAALc/SkfsSCTd74E/s400/project-structure.jpg" /> On the picture you can see a very typical structure for a project.</p>  <p>The <strong>src</strong> folder contains the different projects in their respective folders.     <br />The <strong>lib</strong> folder will contain any third-party library needed to run our project. This is, any dependency that has to be deployed with our project (e.g. NHibernate, Windsor, etc).     <br /></p>  <p>The <strong>tools</strong> folders will contain any tools needed to build our project. It will contain tools like nant, nunit or fxcop, which we will use but won't distribute with our application.     <br /></p>  <p>The <strong>build</strong> folder will hold the artifacts of the build.</p>  <p>   <br />Again, the purpose of putting all these libraries and frameworks under source control is to make EVERITHING needed to build and run your project available. Any new developer getting into your team should then be able to checkout your code and build it successfully, without needing to download and/or install anything from the Internet or hunt down any other dependencies your project builds upon. </p>  <p>If you need further info, I would recommend you to watch <a href="http://www.dimecasts.net/Casts/CastDetails/16">this screencast</a> by <a href="http://codebetter.com/blogs/kyle.baley/">Kyle &quot;Dissociative identity disorder&quot; Baley</a>.</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The road to Continuous Integration. Part 1: Get your source under control!]]></title>
    <link href="http://www.sharpbites.com/2009/09/11/road-to-continuous-integration-part-1/"/>
    <updated>2009-09-11T00:00:00+02:00</updated>
    <id>http://www.sharpbites.com/2009/09/11/road-to-continuous-integration-part-1</id>
    <content type="html"><![CDATA[<div class='post'>
<p><a href="http://lh6.ggpht.com/_kQ7iivKjVno/Sqq2s0-EiHI/AAAAAAAAAL0/DFQJE0sWIhc/s1600-h/timemachine6.jpg"><img style="border-right-width: 0px; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" border="0" alt="time-machine" align="right" src="http://lh3.ggpht.com/_kQ7iivKjVno/Sqq2tpkGKTI/AAAAAAAAAL4/g1pf0RP_k7Q/timemachine_thumb6.jpg?imgmax=800" width="115" height="115" /></a> If you are not already doing so, put your stuff under source control. Right now. It doesn't matter how small your project is or whether you are working alone. If it's worth your time, it's worth putting it under source control. </p>  <h4>What is Source Control?</h4>  <p>Source control, often referred to as VCS (Version Control System) or SCM (Source Code Management) is the management of changes in files. It's a time machine that lets you see how your project looked like at any given point in time.</p>  <p>For a more detailed introduction, see <a href="http://www.ericsink.com/scm/source_control.html">Eric Sink's Source Control HOWTO</a> or the <a href="http://svnbook.red-bean.com/nightly/en/index.html">SVN book</a>.</p>  <h4>Why you should use a SCM tool</h4>  <p>It gives you an infinite undo-button. No matter how much you have screwed up, you can always go back to a stable point.</p>  <p>You can share code with other people.</p>  <p>You can keep track of your changes over time. This allows you to know who changed what, when and (luckily, if you use meaningful comments) why.</p>  <p>You can maintain multiple code bases of your software. Even if you only have one active version at a time, it's useful to start new development independently.</p>  <h4>What should you store?</h4>  <p>Everything you need to build your product. That includes your sources, of course, but also any libraries your projects depends on (avoid referencing GAC'ed or installed libraries), any tools you use and any scripts that you need as part of the process. Nothing should be dependent of your machine installation.</p>  <p>The goal is to be able to get into a clean machine, get a copy of the codebase from your source repository, build it (automatically) and voil&#224;, you are done and ready to start working!</p>  <h4>WHICH SCM ARE YOU?</h4>  <p><a href="http://subversion.tigris.org/">There</a> <a href="http://www.git-scm.org/">are</a> <a href="http://www.selenic.com/mercurial/">many</a> <a href="http://bazaar-vcs.org/">alternatives</a>, just pick one, (oh well, <a href="http://www.codinghorror.com/blog/archives/000660.html">not THAT one</a>). If you don't want to set up and maintain a server, you can use <a href="http://code.google.com/">one</a> <a href="http://sourceforge.net">of</a> <a href="http://www.assembla.com">the</a> <a href="http://github.com/">many</a> <a href="http://bitbucket.org/">online</a> <a href="http://www.launchpad.net">services</a> <a href="http://www.codeplex.com">available</a> (some of them are just for open source projects, and some have free and paid plans). Which one is best will depend on your specific needs:</p>  <h5>If you...</h5>  <ul>   <li>want an easy to install, easy to start tool -&gt; svn </li>    <li>want a powerful tool, at the expense of a bit steeper learning curve -&gt; git, mercurial, bazaar </li>    <li>need to use a mature GUI/integration with Visual Studio -&gt; svn, tfs </li>    <li>need good branching and merging support -&gt; git, mercurial, bazaar </li>    <li>need an all-in-one tool (source control, bug tracking system, continuous integration) completely integrated, even if the individual tools are not-so-great for the -&gt; tfs </li>    <li>are a Microsoft-only shop -&gt; tfs </li> </ul>  <p>For the clients there are also a myriad of tools available for all platforms. You have command-line interfaces, standalone GUI tools (<a href="http://tortoisesvn.net/">tortoisesvn</a>, <a href="http://bitbucket.org/tortoisehg/stable/wiki/Home">tortoisehg</a>, <a href="http://code.google.com/p/tortoisegit/">tortoisegit</a>) and IDE integrated (<a href="http://www.visualsvn.com/">VisualSVN</a>, <a href="http://ankhsvn.open.collab.net/">AnhkSVN</a>, <a href="http://code.google.com/p/gitextensions/">Git Extensions</a>).</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nant vs. msbuild]]></title>
    <link href="http://www.sharpbites.com/2008/09/05/nant-vs-msbuild/"/>
    <updated>2008-09-05T00:00:00+02:00</updated>
    <id>http://www.sharpbites.com/2008/09/05/nant-vs-msbuild</id>
    <content type="html"><![CDATA[<div class='post'>
Yes, this is yet another post on <a href="http://nant.sourceforge.net/">nant</a> vs. <a href="http://msdn.microsoft.com/en-us/library/0k6kkbsd.aspx">msbuild</a>.<br />I had to choose which one of the two to use at the company I work for. After doing a lot of research, it looks like there aren't many differences between them. Here are some of the pro/cons I found:<br /><br />- msbuild comes from Microsoft (yes, that usually matters to some (not all, like me) people)<br />- msbuild is already installed in every .net developer machine (not a big deal)<br />- msbuild has probably better integration with VS build process<br />- msbuild supports parallel builds since .net 3.5 (not that it really matters, since you usually use msbuild from nant to build your projects, anyway).<br />- msbuild evaluates filesets at startup. This seems to cause some headaches when you want to manipulate files generated during the building process.<br />- you can redefine targets in msbuild. in nant you can define general targets and just make your build files call those (or create and use hooks, which is a solution I don't really like).<br />- nant has more examples and better documentation<br />- there is much more information about nant than about msbuild on the web, according to <a href="http://www.google.es/trends?q=msbuild%2C+nant">google trends</a> and google search results (both in english and spanish)<br />- nant has some more tasks, but with <a href="http://msbuildtasks.tigris.org/">msbuildtasks</a>/<a href="http://www.codeplex.com/sdctasks">sdc tasks</a> it's on par with nant and <a href="http://nantcontrib.sourceforge.net/">nantcontrib</a>.<br />- nant helper functions and expressions are better ¿?<br />- I like nant syntax better.<br />- nant is more mature, msbuild was born as an alternative (alt.alt.net :D) to nant for companies with ridiculous "no open source here" and Microsoft "I can't support an open source project I don't control" way of life.<br />- most open source projects tend to use nant over msbuild, so there are plenty of build files and task you can make good use of or have as a reference.<br />- I have already played with nant a little, so I know it's syntax better.<br />- I have started to use nant to automatically generate config files from templates for the different enviroments, and didn't find the way to do so in msbuild.<br />- nant is open source, so people can contribute to it.<br />- nant is not tied to microsoft release cycle, msbuild is.<br /><br /><br />There isn't any strong reason in itself to pick one, but adding them up, things favoured significantly nant over msbuild, so I ended up choosing the former.<br /><br />If you want to read more on the subject, here are some of the links I used in my research (in no particular order):<br />http://ayende.com/Blog/archive/2008/02/25/Zero-Friction-and-why-Defaults-Matters.aspx<br />http://www.winterdom.com/weblog/2007/09/21/MSBuildVsNAnt.aspx<br />http://www.paraesthesia.com/archive/2008/01/08/why-nant-is-better-than-msbuild.aspx<br />http://www.innoq.com/blog/hw/2007/09/24/msbuild_vs_nant.html<br />http://www.codeproject.com/KB/books/msbuild.aspx<br />http://brandonbyars.com/blog/articles/2008/01/10/Managing-Config-Files<br />http://www.paraesthesia.com/archive/2008/01/08/why-nant-is-better-than-msbuild.aspx<br />http://kentb.blogspot.com/2008/02/fail-early-with-full-builds-from-within.html<br />http://weblogs.asp.net/rosherove/archive/2008/01/18/trying-out-team-city-looks-promising.aspx<br />http://codebetter.com/blogs/jeremy.miller/archive/2007/09/20/is-there-a-good-reason-to-switch-to-msbuild.aspx<br />http://codebetter.com/blogs/jeffrey.palermo/archive/2007/09/25/demo-on-automating-your-build-with-nant-and-ccnet.aspx<br />http://www.distribucon.com/blog/WhyMSBuildSucks.aspx<br />http://www.tkachenko.com/blog/archives/000643.html</div>

]]></content>
  </entry>
  
</feed>
