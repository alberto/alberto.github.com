<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tdd | sharp bites]]></title>
  <link href="http://www.sharpbites.com/categories/tdd/atom.xml" rel="self"/>
  <link href="http://www.sharpbites.com/"/>
  <updated>2013-04-25T09:44:55+02:00</updated>
  <id>http://www.sharpbites.com/</id>
  <author>
    <name><![CDATA[alberto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up a ruby testing environment on Linux]]></title>
    <link href="http://www.sharpbites.com/2011/01/29/setting-up-ruby-testing-environment-on/"/>
    <updated>2011-01-29T00:00:00+01:00</updated>
    <id>http://www.sharpbites.com/2011/01/29/setting-up-ruby-testing-environment-on</id>
    <content type="html"><![CDATA[<div class='post'>
Now that <a href="http://www.sharpbites.com/2011/01/setting-up-your-ruby-environment-on.html">we have setup our ruby environment on Linux</a>,&nbsp;we are going to create a setup for testing purposes by adding some useful gems.<br /><br />For that, we will use a feature from <a href="http://rvm.beginrescueend.com/">rvm</a> called&nbsp;<a href="http://rvm.beginrescueend.com/gemsets/basics/">gemsets</a>. A gemset is an independent setup for your environment. That means you can have many environments with a different set of gems (hence the name) installed independently on each one (even with different ruby versions).<br /><br />Usually, when working on a project, you would create a gemset specific for that project, but in this case, we are going to create a gemset for practicing tdd, doing katas, coderetreats, etc. If you plan to use rvm in a serious project (which you should), please read first about <a href="http://rvm.beginrescueend.com/rvm/best-practices/">rvm best practices</a>.<br /><br /><span class="Apple-style-span" style="font-size: large;">A brief introduction to gemsets</span><br />For each version of ruby, rvm creates two gemsets, the default, empty gemset and the global gemset. You can list your gemsets with:<br /><blockquote>rvm gemset list</blockquote>Gems that are installed to the @global gemset are shared to all other gemset for that ruby. We won't install anything here. Instead we will create our own gemset and put everything there.<br /><br />Create a tdd gemset:<br /><blockquote>rvm gemset create tdd</blockquote>Switch to that gemset:<br /><blockquote>rvm use gemset 1.9.2@tdd</blockquote>If you want to make this your default gemset (the one that will be loaded by default) you can do that by doing:<br /><blockquote>rvm use gemset 1.9.2@tdd --default</blockquote>Verify you are on the new gemset:<br /><blockquote>rvm gemset name</blockquote>You should get:<br /><blockquote>tdd</blockquote><span class="Apple-style-span" style="font-size: large;">Gems for testing that rock</span><br />You can install gems <b>for your current gemset</b> using:<br /><blockquote>gem install</blockquote><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">To do unit testing in ruby, <a href="http://relishapp.com/rspec">rspec</a> is a great choice.<br /><blockquote>gem install&nbsp;rspec</blockquote><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">To start using it, create an rspec file, like example_spec.rb inside a spec folder on the root of your project:</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="color: #222222; font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px;"></span></div><pre style="background-color: #e0f8e0; border-bottom-width: 1px; border-color: initial; border-left-color: rgb(8, 138, 8); border-left-width: 1px; border-right-color: rgb(8, 138, 8); border-right-width: 1px; border-style: initial; border-top-color: rgb(8, 138, 8); border-top-style: solid; border-top-width: 1px; font-family: inherit; font-style: inherit; font-weight: inherit; margin-bottom: 8px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 2px; padding-left: 5px; padding-right: 5px; padding-top: 2px; vertical-align: baseline; white-space: pre;"><span class="Apple-style-span" style="color: #222222; font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px;">describe "something" do<br />  it "does something that passes" do<br />    5.should eq(5)<br />  end<br /></span></pre><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">You can then execute it by running:</div><blockquote><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">rspec spec/</div></blockquote><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">For a nicer, colored output, pass in the --colour flag to rspec</div><blockquote><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">rspec spec/ --colour&nbsp;</div></blockquote><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Or create a .rspec config file&nbsp;on your project root (or in your home dir if you want to always use it), to tell rspec to use the colored output by default</div><blockquote><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">echo "--colour" &gt;&gt; .rspec</div></blockquote><br /><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Excecuting rspec by hand all the time gets boring quickly, and it turns out computers are quite good at doing tasks repeteadly, so you can instead use <a href="http://ph7spot.com/musings/getting-started-with-autotest">autotest</a>, a cool gem from the <a href="http://www.zenspider.com/ZSS/Products/ZenTest/">ZenTest suite</a>&nbsp;that will automagically execute your tests when you save your files.</div><blockquote>gem install autotest</blockquote><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Execute it from your project root.</div><blockquote><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">autotest --style rspec2 --quiet</div></blockquote><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">The --style flag tells autotest to look for rspec kind of tests. The --quiet flag removes a bit of noise you probably don't care about.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">If you have created the .rpec file on your project root, you can omit the style flag and autotest will still find the tests.</div><blockquote><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">autotest --quiet</div></blockquote>If you are really lazy like me, you can instruct autotest to be quiet by default by creating a .autotest file in your home:<br /><blockquote>echo "Autotest.options[:quiet] = true" &gt;&gt; ~/.autotest</blockquote>So whatever option you want to use, let's try it.&nbsp;Modify your rspec file and save it. Awesome, isn't it? But wait,&nbsp;there is more!<br /><br />We'll add a nice gem called <a href="https://github.com/fnando/test_notifier">test_notifier</a>.&nbsp;This is the topping of the cake. It will notify your OS with the result of your tests.<br /><br />In order to it on GNOME, we will need to install libnotify:<br /></div><blockquote>sudo apt-get install libnotify-bin</blockquote><blockquote>gem install test_notifier</blockquote>Configure autotest to use test_notifier:<br /><blockquote>echo 'require "test_notifier/runner/autotest"' &gt;&gt; .autotest</blockquote>Or add the following to your rspec/spec_helper file if you want to use it directly with rspec:<br /><blockquote>require "test_notifier/runner/spec"</blockquote>Now you should get a nice notification when you save your file.<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/_kQ7iivKjVno/TUSNLUgyTcI/AAAAAAAAARA/zA_zkMV45dk/s1600/test_notifier.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="138" src="http://1.bp.blogspot.com/_kQ7iivKjVno/TUSNLUgyTcI/AAAAAAAAARA/zA_zkMV45dk/s320/test_notifier.png" width="320" /></a></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD Masterclass]]></title>
    <link href="http://www.sharpbites.com/2009/08/26/tdd-masterclass/"/>
    <updated>2009-08-26T00:00:00+02:00</updated>
    <id>http://www.sharpbites.com/2009/08/26/tdd-masterclass</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Roy Osherove is giving an hands-on TDD Masterclass in the UK, September 21-25. Roy is author of "The Art of Unit Testing" (<a href="http://www.artofunittesting.com/">http://www.artofunittesting.com/</a>), a leading tdd &amp; unit testing book; he maintains a blog at <a href="http://iserializable.com">http://iserializable.com</a> (which amoung other things has critiqued tests written by Microsoft for <a href="http://asp.net">asp.net</a> MVC - check out the testreviews category) and has recently been on the Scott Hanselman podcast (<a href="http://bit.ly/psgYO">http://bit.ly/psgYO</a>) where he educated Scott on best practices in Unit Testing techniques. For a further insight into Roy's style, be sure to also check out Roy's talk at the recent Norwegian Developer's Conference (<a href="http://bit.ly/NuJVa">http://bit.ly/NuJVa</a>).  </p>  <p>Full Details here: <a href="http://bbits.co.uk/tddmasterclass">http://bbits.co.uk/tddmasterclass</a></p>  <p>bbits are holding a raffle for a free ticket for the event. To be eligible to win the ticket (worth Â£2395!) you MUST paste this text, including all links, into your blog and email <a href="mailto:Ian@bbits.co.uk">Ian@bbits.co.uk</a> with the url to the blog entry.  The draw will be made on September 1st and the winner informed by email and on <a href="http://bbits.co.uk/blog">bbits.co.uk/blog</a> </p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SPAM-LOW] Isolator for SharePoint]]></title>
    <link href="http://www.sharpbites.com/2008/11/24/spam-low-isolator-for-sharepoint/"/>
    <updated>2008-11-24T00:00:00+01:00</updated>
    <id>http://www.sharpbites.com/2008/11/24/spam-low-isolator-for-sharepoint</id>
    <content type="html"><![CDATA[<div class='post'>
The Typemock guys have released a version of Typemock isolator for SharePoint. This is the announcement (which will hopefully grant me a license to try Typemock):<br /><br />Typemock are offering their new product for <a href="http://www.typemock.com/sharepointpage.php?utm_source=sp_bb&utm_medium=blog_4sp&utm_campaign=sp_bb">unit testing SharePoint</a> called Isolator For SharePoint, for a special introduction price. it is the only tool that allows you to <a href="http://blog.typemock.com/2008/11/newisolatorforsharepointtoolforunittest.html?utm_source=typeblog&utm_medium=sp_bb&utm_campaign=typeblog">unit test SharePoint</a> without a SharePoint server. To learn more <a href="http://www.typemock.com/sharepointpage.php?utm_source=sp_bb&utm_medium=blog_4sp&utm_campaign=sp_bb">click here</a>.<br /><span style="font-weight:bold;"><br />The first 50 bloggers</span> who blog this text in their blog and tell us about it, will get <font color="#ff0000">a Full Isolator license</font>, Free. for rules and info <a href="http://blog.typemock.com/2008/11/newisolatorforsharepointtoolforunittest.html">click here</a>.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2008 will be the year of...]]></title>
    <link href="http://www.sharpbites.com/2008/01/12/2008-will-be-year-of/"/>
    <updated>2008-01-12T00:00:00+01:00</updated>
    <id>http://www.sharpbites.com/2008/01/12/2008-will-be-year-of</id>
    <content type="html"><![CDATA[<div class='post'>
Linux.<br />Hehe, I'm kidding. I think 2008 will be the year of <a href="http://www.agiledata.org/essays/tdd.html">Test Driven <span style="font-weight:bold;">Design</span></a>. I know it has been already there for a long time already, but I hope that it will become mainstream with the final release of the <a href="http://weblogs.asp.net/scottgu/archive/2007/10/14/asp-net-mvc-framework.aspx">ASP.NET MVC</a> framework Microsoft is releasing this year.<br /><br />Well, in fact, depending how long it takes for them to ship it, it may actually take a bit longer to be widely used tough, but I'm happy this is going to be finally adopted for web development.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write your test first... because adding them later sucks]]></title>
    <link href="http://www.sharpbites.com/2007/12/10/write-your-test-first-because-adding/"/>
    <updated>2007-12-10T00:00:00+01:00</updated>
    <id>http://www.sharpbites.com/2007/12/10/write-your-test-first-because-adding</id>
    <content type="html"><![CDATA[<div class='post'>
So true. As <a href="http://www.jasonbock.net/JB/Default.aspx?blog=entry.a44b94d177ed4c139029e8cca6efe90f">jason</a> points out:<br /><ul><li>It's boring. Write the obvious tests. Check code coverage - what did I miss? Write more tests capturing more edge cases. Wash, rinse, repeat. Ugh.</li><li>It's not trivial. I'm trying to put tests around code that was created months ago, and trying to capture the mental state of the coder and what he was doing is damn near impossible.</li></ul>If you write the test first, you get all the benefits of TDD.<br /><ul><li>You don't get just unit testing, but instead you let your design lead your development.</li><li>As you are writing the minimum code necessary to achieve the <span style="font-weight: bold;">behaviour </span>your test is checking, you end up with full code coverage.</li><li>You can refactor as you test-and-code (and test, and code,...), and you have your tests to cover your ass as you go. If you need to refactor when it's all finished, poor you. You are just left out in the wild.</li></ul></div>

]]></content>
  </entry>
  
</feed>
